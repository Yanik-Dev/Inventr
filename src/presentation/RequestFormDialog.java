/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentation;

import common.FormHelper;
import common.MessageBox;
import constant.RequestStatus;
import entity.Item;
import entity.Request;
import entity.User;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import services.DatabaseService;

/**
 *
 * @author Yanik
 */
public class RequestFormDialog extends javax.swing.JDialog {
    private List<Item> _items = new ArrayList<>(); 
    private User _user = null;
    private Request _request = new Request();
    private DatabaseService _dbService = new DatabaseService();
    /**
     * Creates new form RequestDialog
     */
    public RequestFormDialog(java.awt.Frame parent, boolean modal, User user) {
        super(parent, modal);
        initComponents();
        this._user = user;
        this.getItems();
    }
    
    public RequestFormDialog(java.awt.Frame parent, boolean modal, Request request) {
        super(parent, modal);
        initComponents();
        this._request = request;
        this.getItems();
        this.setForm(request);
        this.buttonClear.setEnabled(false);
        this.buttonSubmit.setText("Save");
    }
    
    public void getItems(){
        this._items = this._dbService.findAll(Item.class);
        for(Item item : this._items){
            this.cmboxItem.addItem(item.getItemName());
        }
    }
    
    public void setForm(Request request){
        this._request = request;
        this.textboxAmount.setText(String.valueOf(request.getAmount()));
        this.cmboxItem.setSelectedIndex(this._items.indexOf(request.getItem()));
        this.cmboxItem.setEnabled(false);
    }
    
    public void setRequest(){
        int index = this.cmboxItem.getSelectedIndex();
        if(index < 0) { return; }
        this._request.setItem(this._items.get(index));
        this._request.setAmount(Double.parseDouble(this.textboxAmount.getText().trim()));
        this._request.setStatus(RequestStatus.PENDING);
    }
    
    public void clearForm(){
        FormHelper.clear(this.panelContainer);
        this._request = new Request();
    }
    
    public boolean validateForm(){
        String errorMessage = "";
        int counter = 0;
        
        try{
           Double d = Double.parseDouble(this.textboxAmount.getText().trim());
           if(d < 1){
            counter++;
            errorMessage += counter+". Amount must be over 0\n";
           }
        }
        catch(NumberFormatException ex){
           counter++;
           errorMessage += counter+". Amount must be a number\n";
           this.textboxAmount.setText("0");
        }
   

        if(this.cmboxItem.getSelectedIndex() < 0){
            counter++;
            errorMessage += counter+". A unit is required\n";
        }
        
        if(counter > 0){
            MessageBox.errorBox(this, "- Invalid Entries", errorMessage);
            return false;
        }
        return true;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelContainer = new javax.swing.JPanel();
        cmboxItem = new javax.swing.JComboBox<>();
        textboxAmount = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        buttonCancel = new javax.swing.JButton();
        buttonClear = new javax.swing.JButton();
        buttonSubmit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cmboxItem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        textboxAmount.setText("0");

        jLabel1.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel1.setText("Amount");

        jLabel2.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel2.setText("Item");

        javax.swing.GroupLayout panelContainerLayout = new javax.swing.GroupLayout(panelContainer);
        panelContainer.setLayout(panelContainerLayout);
        panelContainerLayout.setHorizontalGroup(
            panelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmboxItem, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelContainerLayout.createSequentialGroup()
                        .addGroup(panelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textboxAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 138, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelContainerLayout.setVerticalGroup(
            panelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContainerLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmboxItem, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textboxAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonClear.setText("Clear");
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        buttonSubmit.setText("Submit");
        buttonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(panelContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonSubmit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonClear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonCancel)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(panelContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        this.clearForm();
    }//GEN-LAST:event_buttonClearActionPerformed

    private void buttonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSubmitActionPerformed
        if(!this.validateForm()){ return; }
        
        this.setRequest();
        boolean result = false;
        if(this._request.getId() > 0){
            if(JOptionPane.YES_OPTION != JOptionPane.showConfirmDialog
                    (panelContainer, "Are you sure you want to save edit to resquest for "
                            +String.valueOf(this._request.getAmount())+" "
                            +this._request.getItem().getUnit().getName()+" of "
                            +this._request.getItem().getItemName()+" ", "Confirm Request", JOptionPane.YES_NO_OPTION)){ return;}
            result = this._dbService.update(this._request);
            if(result){
                MessageBox.infoBox(this, "- Result", "Request for item "+this._request.getItem().getItemName()+" was updated successfully");
                this.setVisible(false);
                this.dispose();
            }else{
                MessageBox.errorBox(this, "- Server Error", "Request for item "+this._request.getItem().getItemName()+" was unable to be updated. Please contact admin.");
                //TODO : log error
            }
        }else{
            if(JOptionPane.YES_OPTION != JOptionPane.showConfirmDialog
                    (panelContainer, "Are you sure you want to make resquest for "
                            +String.valueOf(this._request.getAmount())+" "
                            +this._request.getItem().getUnit().getName()+" of "
                            +this._request.getItem().getItemName()+" ", "Confirm Request", JOptionPane.YES_NO_OPTION)){ return;}
            result = this._dbService.create(this._request);
            if(result){
                MessageBox.infoBox(this, "- Result", "Request for item "+this._request.getItem().getItemName()+" was send successfully");
            }else{
                MessageBox.errorBox(this, "- Server Error", "Request for item "+this._request.getItem().getItemName()+" was unable to be sent. Please contact admin.");
                //TODO : log error
            }
        }
        if(result){ this.clearForm(); }
    }//GEN-LAST:event_buttonSubmitActionPerformed

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonClear;
    private javax.swing.JButton buttonSubmit;
    private javax.swing.JComboBox<String> cmboxItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panelContainer;
    private javax.swing.JTextField textboxAmount;
    // End of variables declaration//GEN-END:variables
}
